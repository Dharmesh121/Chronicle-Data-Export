<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_cdsp_chr_data_ex.ChronicleExportAuditLogs</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ChronicleExportAuditLogs</name>
        <script><![CDATA[var ChronicleExportAuditLogs = Class.create();
ChronicleExportAuditLogs.prototype = {
    initialize: function() {
        this.utils = new ChronicleUtils();
    },

    /**
     * Prepare request body and export to Chronicle.
     * 
     * @param {Object} .
     * @returns {Object} 
     */
    exportAuditLogs: function(baseURL, customerID, monitorId, startTime, auditLogsCheckpoint, sysProperties) {
        try {
            if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', 'Started exporting Audit logs'))
                return false;
            var desc;
            var requestBody = {
                "log_type": "SERVICENOW_AUDIT",
                "entries": []
            };
            var tables = ['syslog_transaction', 'sysevent'];

            for (var index in tables) {
                var tableName = tables[index];
                if (tableName == 'syslog_transaction') {
                    var tableLabel = 'Transaction'
                } else {
                    tableLabel = 'Event';
                }
                if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', 'Started exporting \"' + tableLabel + '\" table logs'))
                    return false;
                // To get the maximum count of records after applying the filtered quer
                var maxRecords = this.utils.getNumberofRecords(tableName, startTime, auditLogsCheckpoint);


                var maxRecordsPerBatch = sysProperties.maxRecordsPerBatch;
                // if max record is more in table than max record mentioned in systme property, then set max record to value mentioned in system property
                if (maxRecords >= maxRecordsPerBatch) {
                    maxRecords = maxRecordsPerBatch;
                }

                var recordsLimit = sysProperties.maxRecordsPerAPICall;
                var gr = new GlideRecord(tableName);
                if (tableName == 'sysevent') {
                    gr.addEncodedQuery('sys_updated_on>=javascript:gs.dateGenerate(' + "'" + auditLogsCheckpoint + "'" + ')^ORsys_created_on>=javascript:gs.dateGenerate(' + "'" + auditLogsCheckpoint + "'" + ')');
                    gr.addEncodedQuery('sys_updated_on<javascript:gs.dateGenerate(' + "'" + startTime + "'" + ')^ORsys_created_on<javascript:gs.dateGenerate(' + "'" + startTime + "'" + ')');
                } else {
                    gr.addEncodedQuery('sys_created_on>=javascript:gs.dateGenerate(' + "'" + auditLogsCheckpoint + "'" + ')');
                    gr.addEncodedQuery('sys_created_on<javascript:gs.dateGenerate(' + "'" + startTime + "'" + ')');
                }

                gr.orderByDesc('sys_updated_on');

                var recordIndex = 0;
                while (true) {

                    if (recordIndex >= maxRecords) {
                        break;
                    }
                    var records;
                    /* Slice only 10000 records */
                    if (maxRecords - recordIndex >= recordsLimit) {
                        gr.chooseWindow(recordIndex, recordIndex + recordsLimit);
                        records = recordsLimit;
                    } else {
                        gr.chooseWindow(recordIndex, maxRecords);
                        records = Math.abs(recordIndex - maxRecords);
                    }
                    gr.query();

                    // Create request body
                    requestBody = this.utils.createRequestBody(gr, requestBody);
					
					// If no request body
					if(requestBody == null || requestBody == false){
						return false;
					}
					
                    gs.info('payload of batch create: ' + JSON.stringify(requestBody));

                    var restHandler = new ChronicleRESTHandler();

                    var response = restHandler._makeRESTCall(requestBody, baseURL, sysProperties.maxRetry, sysProperties.retryInterval);
                    gs.info("temp response status of POST api call: " + response.responseStatus);

                    if (response.responseStatus != 200) {
                        desc = 'Error occured while making POST API call to Chronicle with Status Code: ' + response.responseStatus;
                        if (!this.utils.updateProcessMonitor(monitorId, 'Failed', desc, true))
                            return false;
                        gs.error('[exportAuditLogs] ' + desc);
                        return false;
                    }
                    desc = "Exported " + records + " logs of \"" + tableLabel + "\" successfully";
                    if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', desc))
                        return false;
                    gs.info('[ExportAuditLogs] ' + desc);
                    recordIndex += recordsLimit;
                    requestBody.entries = [];
                }
                desc = "Exported total " + maxRecords + " Audit logs of \"" + tableLabel + "\" successfully";
                if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', desc))
                    return false;
                gs.info('[ExportAuditLogs] ' + desc);
            }

            // Update checkpoint
            this.utils.updateCheckpoint('audit_logs_checkpoint', startTime);
            return true;

        } catch (ex) {
            desc = 'Exception occured while exporting Audit logs. Exception: ' + ex;
            if (!this.utils.updateProcessMonitor(monitorId, 'Failed', desc, true))
                return false;
            gs.error('[ExportAuditLogs] ' + desc);
            return false;
        }

    },

    type: 'ChronicleExportAuditLogs'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-30 08:32:24</sys_created_on>
        <sys_id>281453d52f923010044daf5df699b674</sys_id>
        <sys_mod_count>43</sys_mod_count>
        <sys_name>ChronicleExportAuditLogs</sys_name>
        <sys_package display_value="Chronicle Data Export App" source="x_cdsp_chr_data_ex">8ed1c17f1b0e3c10020f11b8b04bcb6c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Chronicle Data Export App">8ed1c17f1b0e3c10020f11b8b04bcb6c</sys_scope>
        <sys_update_name>sys_script_include_281453d52f923010044daf5df699b674</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-15 12:14:20</sys_updated_on>
    </sys_script_include>
</record_update>
