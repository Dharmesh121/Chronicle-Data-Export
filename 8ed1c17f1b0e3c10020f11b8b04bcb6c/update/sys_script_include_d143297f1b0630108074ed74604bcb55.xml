<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_cdsp_chr_data_ex.ChronicleExportCMDB</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>ChronicleExportCMDB</name>
        <script><![CDATA[var ChronicleExportCMDB = Class.create();
ChronicleExportCMDB.prototype = {
    initialize: function() {
        this.utils = new ChronicleUtils();
    },

    /**
     * Prepare CMDB request body and export to Chronicle.
     * 
     * @param: cmdbCheckpoint - CMDB Initial/Checkpoint Time
     * @returns - None
     */
    exportCMDBtables: function(baseURL, customerID, monitorId, CMDBTables, startTime, cmdbCheckpoint, sysProperties) {
        try {
            var message;
            if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', 'Started exporting CMDB tables'))
                return false;

            var requestBody = {
                "log_type": "SERVICENOW_CMDB",
                "entries": []
            };
            CMDBTables = CMDBTables.split(',');

            for (var index in CMDBTables) {
                var gr = new GlideRecord('sys_db_object');
                if (gr.get(CMDBTables[index])) {
                    var tableName = gr.name;
                    var tableLabel = gr.label;
                } else {
                    message = "Couldn't able to find the table having sys_id " + CMDBTables[index];
                    if (!this.utils.updateProcessMonitor(monitorId, 'Failed', message, true))
                        return false;
                    gs.error("[exportCMDBtables] " + message);
                    return false;
                }
                if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', 'Started exporting \"' + tableLabel + '\" table'))
                    return false;


                // 			To get the maximum count of records after applying the filtered query

                var maxRecords = this.utils.getNumberofRecords(tableName, startTime, cmdbCheckpoint);
                var maxRecordsPerBatch = sysProperties.maxRecordsPerBatch;

                // if max record is more in table than max record mentioned in systme property, then set max record to value mentioned in system property
                if (maxRecords >= maxRecordsPerBatch) {
                    maxRecords = maxRecordsPerBatch;
                }

                var recordsLimit = sysProperties.maxRecordsPerAPICall;
                var CMDBGr = new GlideRecord(tableName);
                CMDBGr.addEncodedQuery('sys_updated_on>=javascript:gs.dateGenerate(' + "'" + cmdbCheckpoint + "'" + ')^ORsys_created_on>=javascript:gs.dateGenerate(' + "'" + cmdbCheckpoint + "'" + ')');
                CMDBGr.addEncodedQuery('sys_updated_on<javascript:gs.dateGenerate(' + "'" + startTime + "'" + ')^ORsys_created_on<javascript:gs.dateGenerate(' + "'" + startTime + "'" + ')');


                CMDBGr.orderByDesc('sys_updated_on');

                var recordIndex = 0;
                while (true) {
					//--
					gs.info("--> CMDB before break ran");
					//--

                    if (recordIndex >= maxRecords) {
                        break;
                    }
					
                    var records;
                    /* Slice records */
                    if (maxRecords - recordIndex >= recordsLimit) {
                        CMDBGr.chooseWindow(recordIndex, recordIndex + recordsLimit);
                        records = recordsLimit;
                    } else {
                        CMDBGr.chooseWindow(recordIndex, maxRecords);
                        records = Math.abs(recordIndex - maxRecords);
                    }
                    CMDBGr.query();

                    // Create request body
                    requestBody = this.utils.createRequestBody(CMDBGr, requestBody, monitorId);

                    // If no request body
                    if (requestBody == null || requestBody == false) {
                        return false;
                    }

                    var restHandler = new ChronicleRESTHandler();

                    var response = restHandler._makeRESTCall(requestBody, baseURL, sysProperties.maxRetry, sysProperties.retryInterval);

                    if (response.responseStatus != 200) {
                        message = 'Error occured while making POST API call to Chronicle with status code: ' + response.responseStatus;
                        if (!this.utils.updateProcessMonitor(monitorId, 'Failed', message, true))
                            return false;
                        gs.error('[ExportCMDBtables] ' + message);
                        return false;
                    }
                    message = "Exported " + records + " CMDB records from \"" + tableLabel + "\" table successfully";
                    if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', message))
                        return false;
                    gs.info('[ExportCMDBTables] ' + message);
                    recordIndex += recordsLimit;
                    requestBody.entries = [];
                }
                message = "Exported total " + maxRecords + " CMDB records from \"" + tableLabel + "\" table successfully";
                if (!this.utils.updateProcessMonitor(monitorId, 'Exporting', message))
                    return false;
                gs.info('[ExportCMDBTables] ' + message);

            }
            //Update checkpoint
            this.utils.updateCheckpoint('cmdb_checkpoint', startTime);
            return true;

        } catch (ex) {
            message = 'Exception occured while exporting CMDB tables data. Exception: ' + ex;
            if (!this.utils.updateProcessMonitor(monitorId, 'Failed', message, true))
                return false;
            gs.error('[ExportCMDBtables] ' + message);
            return false;
        }

    },


    type: 'ChronicleExportCMDB'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-08-25 08:28:46</sys_created_on>
        <sys_id>d143297f1b0630108074ed74604bcb55</sys_id>
        <sys_mod_count>136</sys_mod_count>
        <sys_name>ChronicleExportCMDB</sys_name>
        <sys_package display_value="Chronicle Data Export App" source="x_cdsp_chr_data_ex">8ed1c17f1b0e3c10020f11b8b04bcb6c</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Chronicle Data Export App">8ed1c17f1b0e3c10020f11b8b04bcb6c</sys_scope>
        <sys_update_name>sys_script_include_d143297f1b0630108074ed74604bcb55</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-09-15 12:35:36</sys_updated_on>
    </sys_script_include>
</record_update>
